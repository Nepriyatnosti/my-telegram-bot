from datetime import datetime
from venv import logger
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.models.user import History, User
from bot.keyboards.inline import history_pagination, main_menu
from aiogram.filters import Text

router = Router()


@router.callback_query(Text(startswith="history_page_"))
async def handle_history_pagination(callback: types.CallbackQuery):
    page = int(callback.data.split("_")[-1])
    user = User.get_or_none(user_id=str(callback.from_user.id))
    entries = user.history.order_by(History.timestamp.desc())

    await callback.message.edit_reply_markup(
        reply_markup=history_pagination(entries, page)
    )
    await callback.answer()


@router.callback_query(Text("history"))
async def show_history(callback: types.CallbackQuery):
    try:
        user, created = User.get_or_create(
            user_id=str(callback.from_user.id),
            defaults={'username': callback.from_user.username}
        )

        entries = (History
                   .select()
                   .where(History.user == user)
                   .order_by(History.timestamp.desc()))

        if not entries:
            await callback.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞!")
            return

        await callback.message.edit_text(
            "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:",
            reply_markup=history_pagination(entries, page=1)
        )
        await callback.answer()

    except Exception as e:
        logger.exception("History error:")  # –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")


@router.callback_query(Text(startswith="history_detail_"))
async def show_history_detail(callback: types.CallbackQuery):
    try:
        entry_id = int(callback.data.split("_")[-1])
        entry = History.get_by_id(entry_id)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ timestamp
        timestamp_str = entry.timestamp.strftime("%d.%m.%Y %H:%M") if isinstance(entry.timestamp, datetime) else str(
            entry.timestamp)

        response = (
            f"üìÖ *–î–∞—Ç–∞:* `{timestamp_str}`\n"
            f"üîç *–ö–æ–º–∞–Ω–¥–∞:* `{entry.command}`\n"
            f"üìù *–†–µ–∑—É–ª—å—Ç–∞—Ç:*\n```\n{entry.result}\n```"
        )

        await callback.message.answer(
            response,
            parse_mode="MarkdownV2",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏",
                        callback_data=f"history_page_1"
                    )]
                ]
            )
        )
        await callback.answer()

    except History.DoesNotExist:
        await callback.answer("üö´ –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª–µ–π: {repr(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–∏")


@router.callback_query(Text("back_to_menu"))
async def handle_back_to_menu(
    callback: types.CallbackQuery,
    state: FSMContext
):
    await state.clear()
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )
    await callback.answer()

@router.callback_query(Text("clear_history"))
async def clear_history(callback: types.CallbackQuery):
    user = User.get(user_id=str(callback.from_user.id))
    History.delete().where(History.user == user).execute()
    await callback.answer("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
    await show_history(callback)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

