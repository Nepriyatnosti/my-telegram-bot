from aiogram import Router, types
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.services.text_analysis import analyze_text
from bot.models.user import History, User
from datetime import datetime

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()


class AnalysisStates(StatesGroup):
    waiting_for_text = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞"
@router.callback_query(Text("analyze"))
async def start_analysis(callback: types.CallbackQuery, state: FSMContext):  # –î–æ–±–∞–≤–ª—è–µ–º state
    await callback.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    await state.set_state(AnalysisStates.waiting_for_text)  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
@router.message(AnalysisStates.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext):
    text = message.text

    user, created = User.get_or_create(
        user_id=str(message.from_user.id),
        defaults={'username': message.from_user.username}
    )

    analysis_result = await analyze_text(text)

    History.create(
        user=user,
        command="text_analysis",
        result=analysis_result,
        timestamp=datetime.now()  # –Ø–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    )



    await message.answer(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:\n{analysis_result}")
    await state.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from bot.keyboards.inline import main_menu  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )